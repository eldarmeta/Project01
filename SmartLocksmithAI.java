
import java.util.*;

public class SmartLocksmithAI {

    private static final int NUM_PINS = 5;
    private static final int POSITIONS_PER_PIN = 6;
    private static final int MAX_ATTEMPTS = 100000;

    private static int[] secretCombination;
    private static Map<Integer, Double>[] pinProbability; // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è

    private static Random random = new Random();

    public static void main(String[] args) {
        secretCombination = generateSecretCombination();
        System.out.println("üîí –°–µ–∫—Ä–µ—Ç –∑–∞–º–∫–∞ (—Å–∫—Ä—ã—Ç–æ): " + Arrays.toString(secretCombination));

        generatePinProbabilities();
        System.out.println("üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –ø–∏–Ω–∞–º:");
        for (int i = 0; i < NUM_PINS; i++) {
            System.out.println("  –ü–∏–Ω " + (i+1) + ": " + pinProbability[i]);
        }

        long start = System.currentTimeMillis();
        int attempts = smartUnlock();
        long end = System.currentTimeMillis();

        if (attempts >= 0) {
            System.out.println("‚úÖ –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç –∑–∞ " + attempts + " –ø–æ–ø—ã—Ç–æ–∫");
        } else {
            System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏");
        }

        System.out.println("‚è± –í—Ä–µ–º—è: " + (end - start) + " –º—Å");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    private static int[] generateSecretCombination() {
        int[] combo = new int[NUM_PINS];
        for (int i = 0; i < NUM_PINS; i++) {
            combo[i] = random.nextInt(POSITIONS_PER_PIN) + 1;
        }
        return combo;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–Ω–∞
    private static void generatePinProbabilities() {
        pinProbability = new Map[NUM_PINS];
        for (int i = 0; i < NUM_PINS; i++) {
            pinProbability[i] = new HashMap<>();
            double total = 0.0;

            for (int pos = 1; pos <= POSITIONS_PER_PIN; pos++) {
                double weight = random.nextDouble();
                pinProbability[i].put(pos, weight);
                total += weight;
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            for (int pos = 1; pos <= POSITIONS_PER_PIN; pos++) {
                double normalized = pinProbability[i].get(pos) / total;
                pinProbability[i].put(pos, normalized);
            }
        }
    }

    // AI-–ø–æ–¥–±–æ—Ä –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä)
    private static int smartUnlock() {
        PriorityQueue<Combination> queue = new PriorityQueue<>();
        queue.offer(new Combination(new int[NUM_PINS], 0.0));

        int attempts = 0;

        while (!queue.isEmpty() && attempts < MAX_ATTEMPTS) {
            Combination current = queue.poll();
            if (current.key.length < NUM_PINS) {
                int pinIndex = current.key.length;
                for (int pos = 1; pos <= POSITIONS_PER_PIN; pos++) {
                    int[] newKey = Arrays.copyOf(current.key, pinIndex + 1);
                    newKey[pinIndex] = pos;
                    double prob = pinProbability[pinIndex].get(pos);
                    queue.offer(new Combination(newKey, current.probabilityScore + -Math.log(prob))); // log-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                }
            } else {
                attempts++;
                if (Arrays.equals(current.key, secretCombination)) {
                    System.out.println("üîì –ù–∞–π–¥–µ–Ω –∫–ª—é—á: " + Arrays.toString(current.key));
                    return attempts;
                }
            }
        }
        return -1;
    }

    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    static class Combination implements Comparable<Combination> {
        int[] key;
        double probabilityScore;

        Combination(int[] key, double probabilityScore) {
            this.key = key;
            this.probabilityScore = probabilityScore;
        }

        @Override
        public int compareTo(Combination other) {
            return Double.compare(this.probabilityScore, other.probabilityScore); // –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º
        }
    }
}
