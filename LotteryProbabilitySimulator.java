
import java.util.*;

public class LotteryProbabilitySimulator {

    static final int NUMBERS_ON_TICKET = 6;
    static final int MAX_NUMBER = 49;

    static final int JACKPOT_MATCH = 6;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("üéüÔ∏è –°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?");
        int ticketCount = scanner.nextInt();

        List<Set<Integer>> userTickets = generateTickets(ticketCount);
        Set<Integer> winningNumbers = generateWinningNumbers();

        System.out.println("\nüèÜ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: " + winningNumbers);

        int bestMatch = 0;
        for (Set<Integer> ticket : userTickets) {
            int matches = countMatches(ticket, winningNumbers);
            if (matches > bestMatch) bestMatch = matches;

            System.out.println("–í–∞—à –±–∏–ª–µ—Ç: " + ticket + " ‚Üí –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: " + matches);
        }

        showResult(bestMatch, ticketCount);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤
    static List<Set<Integer>> generateTickets(int count) {
        List<Set<Integer>> tickets = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            tickets.add(generateRandomSet(NUMBERS_ON_TICKET));
        }
        return tickets;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–±–µ–¥–Ω—ã—Ö —á–∏—Å–µ–ª
    static Set<Integer> generateWinningNumbers() {
        return generateRandomSet(NUMBERS_ON_TICKET);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    static Set<Integer> generateRandomSet(int size) {
        Random rand = new Random();
        Set<Integer> set = new TreeSet<>();
        while (set.size() < size) {
            set.add(rand.nextInt(MAX_NUMBER) + 1);
        }
        return set;
    }

    // –ü–æ–¥—Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    static int countMatches(Set<Integer> ticket, Set<Integer> winning) {
        Set<Integer> intersection = new HashSet<>(ticket);
        intersection.retainAll(winning);
        return intersection.size();
    }

    // –ò—Ç–æ–≥ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    static void showResult(int bestMatch, int ticketCount) {
        System.out.println("\nüé∞ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + bestMatch + " —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π");

        switch (bestMatch) {
            case 6:
                System.out.println("üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –º–æ–≥–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞—Ç—å $1,000,000");
                break;
            case 5:
                System.out.println("ü•à –û—Ç–ª–∏—á–Ω–æ! ~ $10,000");
                break;
            case 4:
                System.out.println("ü•â –•–æ—Ä–æ—à–æ! ~ $500");
                break;
            case 3:
                System.out.println("üíµ –ú–∞–ª–µ–Ω—å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à ~ $50");
                break;
            default:
                System.out.println("üôÅ –£–≤—ã, –Ω–∏—á–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }

        double totalCombos = combination(MAX_NUMBER, NUMBERS_ON_TICKET);
        double yourChance = (double) ticketCount / totalCombos;

        System.out.printf("üìä –®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –¥–∂–µ–∫–ø–æ—Ç —Å %d –±–∏–ª–µ—Ç–æ–º(–∞–º–∏): %.12f%%\n",
                ticketCount, yourChance * 100);
    }

    // –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞: C(n, k)
    static long combination(int n, int k) {
        long result = 1;
        for (int i = 1; i <= k; i++) {
            result = result * (n - i + 1) / i;
        }
        return result;
    }
}
